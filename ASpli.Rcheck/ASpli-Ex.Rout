
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ASpli"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ASpli')
Loading required package: parallel
Loading required package: edgeR
Loading required package: limma
Loading required package: data.table
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ASpli-package")
> ### * ASpli-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ASpli-package
> ### Title: Analysis of alternative splicing using RNAseq
> ### Aliases: ASpli-package ASpli
> ### Keywords: alternative splicing, RNA-seq, junctions
> 
> ### ** Examples
>  
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored.
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes, bins and junctions 
>   du       <- DUreport.norm( counts, targets )
Design matrix not provided. Switch to the classic mode.
Junctions DU completed
> 
>   # Calculate PSI / PIR for bins and junction.
>   as       <- AsDiscover( counts, targets, features, bams, readLength = 100, 
+                           threshold = 5, cores = 1 )
Junctions PSI completed
Junctions PIR completed
Junctions IR PIR completed
Junctions AltSS PSI completed
Junctions ES PSI completed
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("AsDiscover-methods")
> ### * AsDiscover-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AsDiscover
> ### Title: Report PSI and PIR using experimental junctions
> ### Aliases: AsDiscover
> 
> ### ** Examples
> 
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Warning: call dbDisconnect() when finished working with a connection
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes, bins and junctions 
>   du       <- DUreport.norm( counts, targets )
Design matrix not provided. Switch to the classic mode.
Junctions DU completed
> 
>   # Calculate PSI / PIR for bins and junction.
>   as       <- AsDiscover( counts, targets, features, bams, readLength = 100, 
+                           threshold = 5, cores = 1 )
Junctions PSI completed
Junctions PIR completed
Junctions IR PIR completed
Junctions AltSS PSI completed
Junctions ES PSI completed
>   
>   writeAS( as = as, output.dir = "only_as" )
> 
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("DUreport.norm")
> ### * DUreport.norm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DUreport.norm
> ### Title: Differential gene expression and differential bin usage
> ###   estimation
> ### Aliases: DUreport.norm
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes and bins
>   du       <- DUreport.norm( counts, targets )
Design matrix not provided. Switch to the classic mode.
Junctions DU completed
> 
>   # Export results  
>   writeDU( du = du, output.dir = "only_du" )
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("DUreport.offset")
> ### * DUreport.offset
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DUreport.offset
> ### Title: Differential gene expression and differential bin usage
> ###   estimation
> ### Aliases: DUreport.offset
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes and bins
>   du       <- DUreport.offset( counts, targets )
Design matrix not provided. Switch to the classic mode.
> 
>   # Export results  
>   writeDU( du = du, output.dir = "only_du" )
Warning in dir.create(dirname(filename)) :
  'only_du/genes' already exists
Warning in dir.create(dirname(filename)) :
  'only_du/exons' already exists
Warning in dir.create(dirname(filename)) :
  'only_du/introns' already exists
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("acc_AS")
> ### * acc_AS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: AS accessors
> ### Title: Accessors for ASpliAS object
> ### Aliases: altPSI esPSI irPIR joint junctionsPIR junctionsPSI altPSI<-
> ###   esPSI<- irPIR<- joint<- junctionsPIR<- junctionsPSI<-
> 
> ### ** Examples
> 
> 
> # Accessing data tables from an ASpliAS object
> 
> as <- aspliASexample()
> 
> ap <- altPSI(as)
> ep <- esPSI(as)
> ip <- irPIR(as)
> j  <- joint(as)
> jpi <- junctionsPIR(as)
> jps <- junctionsPSI(as)
> 
> # Setting data tables to an ASpliAS object
> 
> as2 <- new( 'ASpliAS' )
> 
> altPSI( as2 )  <- ap
> esPSI( as2 )  <- ep
> irPIR( as2 )  <- ip
> joint( as2 )  <- j
> junctionsPIR( as2 )  <- jpi
> junctionsPSI( as2 )  <- jps
> 
> 
> 
> 
> cleanEx()
> nameEx("acc_DU")
> ### * acc_DU
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DU accessors
> ### Title: Accessors for ASpliDU object
> ### Aliases: genesDE genesDE<- binsDU binsDU<- junctionsDU junctionsDU<-
> 
> ### ** Examples
> 
>   
>   # Get data tables from an ASpliDU object
>   
>   du <- aspliDUexample1()
>   
>   gde <- genesDE( du )
>   bdu <- binsDU( du )
>   jdu <- junctionsDU( du )
>   
>   # Set data tables to an ASpliDU object 
>   
>   genesDE( du )     <- gde
>   binsDU( du )      <- bdu
>   junctionsDU( du ) <- jdu
> 
> 
> 
> 
> cleanEx()
> nameEx("acc_counts")
> ### * acc_counts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Counts accesors
> ### Title: Accessors for ASpliCounts object
> ### Aliases: countsb countse1i countsg countsie2 countsj rdsg rdsb
> ###   countsb<- countse1i<- countsg<- countsie2<- countsj<- rdsg<- rdsb<-
> 
> ### ** Examples
> 
> 
> # Get data tables from an ASpliCounts object
> 
> counts <- aspliCountsExample() 
> 
> cb1  <- countsb(counts)
> ce1i <- countse1i(counts)
> cg   <- countsg(counts)
> cie2 <- countsie2(counts)
> cj   <- countsj(counts)
> rg   <- rdsg(counts)
> rb   <- rdsb(counts)
> 
> # Set data tables to an ASpliCounts object
> 
> countsb(counts)   <- cb1
> countse1i(counts) <- ce1i
> countsg(counts)   <- cg
> countsie2(counts) <- cie2
> countsj(counts)   <- cj
> rdsg(counts)      <- rg
> rdsb(counts)      <- rb
> 
> 
> 
> 
> cleanEx()
> nameEx("acc_features")
> ### * acc_features
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Features accesors
> ### Title: Accessors for ASpliFeatures object
> ### Aliases: featuresb featuresg featuresj featuresb<- featuresg<-
> ###   featuresj<-
> 
> ### ** Examples
> 
>   # Get data from an ASpliFeatures object
>   
>   features <- aspliFeaturesExample()
>   
>   fg <- featuresg( features )
>   fb <- featuresb( features )
>   fj <- featuresj( features )
>   
>   # Set data to an ASpliFeatures object
>   
>   featuresg( features ) <- fg 
>   featuresb( features ) <- fb 
>   featuresj( features ) <- fj 
> 
> 
> 
> 
> cleanEx()
> nameEx("binDUreport-method")
> ### * binDUreport-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binDUreport
> ### Title: Differential gene expression and differential bin usage
> ###   estimation
> ### Aliases: binDUreport
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes and bins
>   du       <- binDUreport( counts, targets )
Filtering genes:
  Filtering by reads.
  Filtering using C,D conditions
  Filtering any condition with mean minimum value 10
  Filtering by read density.
  Filtering using C,D conditions
  Filtering any condition with mean minimum value 0.05
Filtering genes done
Genes differential expression:
  Contrast:-1C  1D  
  Running exact test
Design matrix not provided. Switch to the classic mode.
Genes differential expression done
Genes DE completed
Bins DE completed
> 
>   # Export results  
>   writeDU( du = du, output.dir = "only_du" )
Warning in dir.create(dirname(filename)) :
  'only_du/genes' already exists
Warning in dir.create(dirname(filename)) :
  'only_du/exons' already exists
Warning in dir.create(dirname(filename)) :
  'only_du/introns' already exists
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("binGenome")
> ### * binGenome
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: binGenome
> ### Title: Feature coordinates extraction
> ### Aliases: binGenome
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
> 
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Extract gene, bin and junctions features
>   GeneCoord <- featuresg(features)
>   BinCoord <- featuresb(features)
>   JunctionCoord <- featuresj(features)
>   
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("containsJunctions-function")
> ### * containsJunctions-function
> 
> flush(stderr()); flush(stdout())
> 
> ### Name:  Examine ASpliDU objects 
> ### Title: Examine ASpliDU objects
> ### Aliases: containsJunctions containsGenesAndBins
> 
> ### ** Examples
> 
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored.
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Create an ASpliDU object.
>   # 
>   du       <- DUreport.norm( counts, targets )
Design matrix not provided. Switch to the classic mode.
Junctions DU completed
>   
>   # Verify if du contains results for genes and bins.
>   containsGenesAndBins( du )
[1] TRUE
> 
>   # Verify if du contains results for genes and bins.
>   containsJunctions( du )
[1] TRUE
>   
>   
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("example_data")
> ### * example_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Example data
> ### Title: Example Aspli objects
> ### Aliases: aspliASexample aspliBamsExample aspliCountsExample
> ###   aspliDUexample1 aspliDUexample2 aspliExampleBamList aspliExampleGTF
> ###   aspliFeaturesExample aspliJunctionDUexample aspliTargetsExample
> 
> ### ** Examples
> 
>   as <- aspliASexample()
>   bams <- aspliBamsExample()
>   counts <- aspliCountsExample()
>   du1 <- aspliDUexample1()
>   du2 <- aspliDUexample2()
>   bamfiles <- aspliExampleBamList()
>   gtffile <- aspliExampleGTF()
>   features <- aspliFeaturesExample()
>   jdu <- aspliJunctionDUexample()
>   targets <-aspliTargetsExample()
> 
> 
> 
> cleanEx()
> nameEx("filterDU-method")
> ### * filterDU-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterDU
> ### Title: Filtering ASpliDU objects
> ### Aliases: filterDU
> 
> ### ** Examples
> 
> 
>  # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of junctions only 
>   du       <- DUreport.norm( counts, targets )
Design matrix not provided. Switch to the classic mode.
Junctions DU completed
>   
>   # Filter by FDR
>   duFiltered1 <- filterDU( du, what=c('genes','bins'), 
+      fdr = 0.01 )
> 
> 
>   # Filter by logFC, only those that were up-regulated 
>   duFiltered2 <- filterDU( du, what=c('genes','bins'), 
+      logFC = log( 1.5, 2 ),  absLogFC = FALSE )
> 
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("getConditions-function")
> ### * getConditions-function
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getConditions
> ### Title: Retrieve condition names from a targets data frame.
> ### Aliases: getConditions
> 
> ### ** Examples
> 
>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files.
>   # Return value is c('C', 'D') in this example. 
>   conditions <- getConditions(targets)
> 
> 
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", "A_C_3.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam", "A_D_3.bam"  )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:8)),
+                bam = file.path( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','C','D','D','D','D'),
+                factor2 = c( 'E','E','F','F','E','E','F','F')  )
>   
>   # Load reads from bam files.
>   # Return value is c("C_E", "C_F", "D_E", "D_F") in this example. 
>   conditions <- getConditions(targets)
> 
> 
> 
> 
> cleanEx()
> nameEx("junctionDUreport")
> ### * junctionDUreport
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: junctionDUreport
> ### Title: Differential junction usage estimation
> ### Aliases: junctionDUreport
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored.
>   
>   #as <- new("ASpliAS")
>   #targets <- 1
>   #a <- junctionDUreportExt(as, targets)
>   
> 
> 
> 
> cleanEx()
> nameEx("loadBAM")
> ### * loadBAM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadBAM
> ### Title: Load BAM files
> ### Aliases: loadBAM
> 
> ### ** Examples
> 
> 
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>                
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
> 
> 
> 
> cleanEx()
> nameEx("mergeBinDUAS-method")
> ### * mergeBinDUAS-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mergeBinDUAS
> ### Title: Differential usage of bins and PSI/PIR.
> ### Aliases: mergeBinDUAS
> 
> ### ** Examples
> 
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam",
+                      "B_C_0.bam", "B_C_1.bam", "B_C_2.bam", 
+                      "B_D_0.bam", "B_D_1.bam", "B_D_2.bam" )
>                      
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:12)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'A','A','A','A','A','A','B','B','B','B','B','B'),
+                factor2 = c( 'C','C','C','D','D','D','C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes and bins
>   du <- DUreport.norm( counts, targets , contrast = c(1,-1,-1,1))
Junctions DU completed
>   
>   # Calculate PSI / PIR for bins and junction.
>   as <- AsDiscover( counts, targets, features, bams, readLength = 100, 
+                           threshold = 5, cores = 1 )
Junctions PSI completed
Junctions PIR completed
Junctions IR PIR completed
Junctions AltSS PSI completed
Junctions ES PSI completed
> 
>   mas <- mergeBinDUAS( du, as, targets, contrast =  c(1,-1,-1,1) )                     
>   
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("mergeReports")
> ### * mergeReports
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mergeReports
> ### Title: Differential junction usage estimation. COMPLETAR
> ### Aliases: mergeReports
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored.
>   
>   #as <- new("ASpliAS")
>   #targets <- 1
>   #a <- junctionDUreportExt(as, targets)
>   
> 
> 
> 
> cleanEx()
> nameEx("plotBins")
> ### * plotBins
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotBins
> ### Title: Draw plots of gene counts, bin counts, PSI/PIR value, inclusion
> ###   and exclusion junctions for selected bins.
> ### Aliases: plotBins
> 
> ### ** Examples
> 
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam",
+                      "B_C_0.bam", "B_C_1.bam", "B_C_2.bam", 
+                      "B_D_0.bam", "B_D_1.bam", "B_D_2.bam" )
>                      
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:12)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'A','A','A','A','A','A','B','B','B','B','B','B'),
+                factor2 = c( 'C','C','C','D','D','D','C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Calculate differential usage of genes, bins and junctions 
>   du       <- DUreport.norm( counts, targets , contrast = c(1,-1,-1,1))
Junctions DU completed
> 
>   # Calculate PSI / PIR for bins and junction.
>   as       <- AsDiscover( counts, targets, features, bams, readLength = 100, 
+                           threshold = 5, cores = 1 )
Junctions PSI completed
Junctions PIR completed
Junctions IR PIR completed
Junctions AltSS PSI completed
Junctions ES PSI completed
>   
>   # Plot bin data. Factor2 is the main factor for graphic representation in
>   # this example as it is the first in factorsAndValues argument.
>   # This makes a bar plot comparing four conditions, grouped by factor1.
>   plotBins( counts, as, 'GENE03:E002', 
+     factorsAndValues = list( 
+       factor2 = c('C','D'), 
+       factor1 = c('A','B') ),
+     las.x = 1,
+     legendAtSide = TRUE,
+     useHCColors = TRUE,   
+     targets = targets,
+     barWidth = 0.95,
+     innerMargins = c( 2.1, 4.1, 1.1, 1.1 ) )
[1] "GENE03:E002"
>     
>     
>   # Redefine targets  
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:12)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'A','A','B','B','C','C','D','D','E','E','F','F') )
>   
>   as       <- AsDiscover( counts, targets, features, bams, readLength = 100, 
+                           threshold = 5, cores = 1 )
Junctions PSI completed
Junctions PIR completed
Junctions IR PIR completed
Junctions AltSS PSI completed
Junctions ES PSI completed
>   
>   # This makes a line plot for six conditions, grouped by factor1.                       
>   plotBins( counts, as, 'GENE03:E002', 
+     factorsAndValues = list( 
+       factor1 = c('A','B','C','D','E','F') ),
+     las.x = 1,
+     legendAtSide = FALSE,
+     targets = targets,
+     innerMargins = c( 2.1, 4.1, 1.1, 1.1 ) )                        
[1] "GENE03:E002"
>   
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("plotGenomicRegions")
> ### * plotGenomicRegions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotGenomicRegions
> ### Title: Create genomic regions coverage plots
> ### Aliases: plotGenomicRegions
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D'),
+                stringsAsFactors = FALSE )
>   
>   # Plot a single bin to a window
>   plotGenomicRegions( 
+     features, 
+     'GENE01:E002', 
+     genomeTxDb, 
+     targets, 
+     sashimi = FALSE,
+     colors = '#AA4444', 
+     annotationHeight = 0.1, 
+     tempFolder = 'tmp', 
+     verbose = TRUE , 
+     avoidReMergeBams = FALSE, 
+     useTransparency = FALSE ) 
Auto arrange for one experimental factor: 1 x n matrix
Using colors given by user
Selecting Bins
Extracting gene regions of selected bins
Using selected regions to extract and merge reads
Extracting and merging reads from bam files
Extraction completed: 1 / 6
Extraction completed: 2 / 6
Extraction completed: 3 / 6
Extraction completed: 4 / 6
Extraction completed: 5 / 6
Extraction completed: 6 / 6
Merging completed
Plotting GENE01:E002 ( 1 / 1 )
>     
>   # plot two bins to pdf files.
>   plotGenomicRegions( 
+     features, c( 'GENE01:E002', 'GENE02:E002' ), 
+     genomeTxDb, 
+     targets, 
+     layout = matrix( c( 'C', 'D'), ncol = 1),
+     colors = matrix( c( '#663243', '#363273'), ncol = 1),
+     plotTitles = matrix( c( 'C condition', 'D condition'), ncol = 1),
+     sashimi = FALSE,
+     mainFontSize = 12,
+     annotationHeight = 0.1, 
+     tempFolder = 'tmp', 
+     verbose = TRUE , 
+     avoidReMergeBams = FALSE, 
+     useTransparency = TRUE,
+     outfolder = '.',
+     outfileType = 'pdf',
+     deviceOpt = list( height = 6, width = 5, paper = 'a4r' ) ) 
Using given layout matrix to arrange plots
Selecting Bins
Extracting gene regions of selected bins
Using selected regions to extract and merge reads
Extracting and merging reads from bam files
Extraction completed: 1 / 12
Extraction completed: 2 / 12
Extraction completed: 3 / 12
Extraction completed: 4 / 12
Extraction completed: 5 / 12
Extraction completed: 6 / 12
Extraction completed: 7 / 12
Extraction completed: 8 / 12
Extraction completed: 9 / 12
Extraction completed: 10 / 12
Extraction completed: 11 / 12
Extraction completed: 12 / 12
Merging completed
Plotting GENE01:E002 ( 1 / 2 )
Plotting GENE02:E002 ( 2 / 2 )
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("rds")
> ### * rds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rds
> ### Title: Read density of gene and bins
> ### Aliases: rds
> 
> ### ** Examples
> 
>     # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>                           
>   # Calculates read densities
>   counts <- rds( counts, targets )
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("readCounts")
> ### * readCounts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readCounts
> ### Title: Summarize read overlaps
> ### Aliases: readCounts
> 
> ### ** Examples
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   # Export data
>   writeCounts( counts, output.dir = "only_counts" )
>   
> 
> 
> 
> cleanEx()

detaching 'package:GenomicFeatures', 'package:AnnotationDbi',
  'package:Biobase', 'package:GenomicRanges', 'package:GenomeInfoDb',
  'package:IRanges', 'package:S4Vectors', 'package:stats4',
  'package:BiocGenerics'

> nameEx("subset-methods")
> ### * subset-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Subset ASpli objects
> ### Title: Subset ASpli objects
> ### Aliases: subsetBams subsetTargets subset
> 
> ### ** Examples
> 
> 
>   # Create a transcript DB from gff/gtf annotation file.
>   # Warnings in this examples can be ignored. 
>   library(GenomicFeatures)
Loading required package: BiocGenerics

Attaching package: 'BiocGenerics'

The following object is masked from 'package:limma':

    plotMA

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from 'package:stats':

    IQR, mad, sd, var, xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: 'S4Vectors'

The following objects are masked from 'package:data.table':

    first, second

The following object is masked from 'package:base':

    expand.grid

Loading required package: IRanges

Attaching package: 'IRanges'

The following object is masked from 'package:data.table':

    shift

Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: AnnotationDbi
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

>   genomeTxDb <- makeTxDbFromGFF( system.file('extdata','genes.mini.gtf', 
+                                  package="ASpli") )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
>   
>   # Create an ASpliFeatures object from TxDb
>   features <- binGenome( genomeTxDb )
* Number of extracted Genes = 10
* Number of extracted Exon Bins = 38
* Number of extracted intron bins = 34
* Number of extracted trascripts = 25
* Number of extracted junctions = 23
* Number of AS bins (not include external) = 17
* Number of AS bins (include external) = 17
* Classified as: 
	ES bins = 1	(6%)
	IR bins = 3	(18%)
	Alt5'ss bins = 2	(12%)
	Alt3'ss bins = 2	(12%)
	Multiple AS bins = 9	(53%)
	classified as:
			ES bins = 1	(11%)
			IR bins = 4	(44%)
			Alt5'ss bins = 2	(22%)
			Alt3'ss bins = 1	(11%)

>   
>   # Define bam files, sample names and experimental factors for targets.
>   bamFileNames <- c( "A_C_0.bam", "A_C_1.bam", "A_C_2.bam", 
+                      "A_D_0.bam", "A_D_1.bam", "A_D_2.bam" )
>   targets <- data.frame( 
+                row.names = paste0('Sample_',c(1:6)),
+                bam = system.file( 'extdata', bamFileNames, package="ASpli" ),
+                factor1 = c( 'C','C','C','D','D','D') )
>   
>   # Load reads from bam files
>   bams <- loadBAM( targets )
>   
>   # Read counts from bam files
>   counts   <- readCounts( features, bams, targets, cores = 1, readLength = 100, 
+                           maxISize = 50000 )
Read summarization by gene completed
Read summarization by bin completed
Read summarization by ei1 region completed
Read summarization by ie2 region completed
Junction summarization completed
>   
>   # Create ASpliAS object                        
>   as       <- AsDiscover( counts, targets, features, bams, readLength = 100, 
+                           threshold = 5, cores = 1 )
Junctions PSI completed
Junctions PIR completed
Junctions IR PIR completed
Junctions AltSS PSI completed
Junctions ES PSI completed
>                           
>   # Define selection
>   select <- c('Sample_1', 'Sample_2', 'Sample_4', 'Sample_5')                       
>   
>   # Subset target 
>   targets2 <- subsetTargets( targets, select )
>   
>   # Subset bams 
>   bams2 <- subsetBams( bams, targets, select )
>   
>   # Subset ASpliCounts object 
>   counts2 <- subset( counts, targets, select )
>   
>   # Subset ASpliAS object 
>   as2 <- subset( as, targets, select )
>   
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  47.456 0.216 49.08 0 0 
> grDevices::dev.off()
X11cairo 
       3 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
